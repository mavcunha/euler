#!/usr/bin/env zsh

zparseopts -D -E - e:=ex l:=lang -show=show s=show -summary=sum -list=list

readonly SOLDIR=${PROJECT_EULER_DIR:-"src"}

typeset exercise=${ex[-1]%.*}
typeset version=${ex[-1]/${exercise}/}
typeset language=${lang[-1]}

typeset -A interpreters
typeset -A extensions

function setlang {
  readonly l=${1:?"Language required"}
  readonly i=${2:-${l}}
  readonly e=${3:-${l}}

  interpreters[${l}]=${i}
  extensions[${l}]=${e}
}

function path {
  readonly l=${1:?"Language required"}
  readonly e=${2:?"Exercise required"}
  readonly v=${3:-""}

  echo "${SOLDIR}/${e}/${l}/${e}${v}.${extensions[${l}]}"
}

function run {
  readonly l=${1:?"Language required"}
  readonly e=${2:?"Exercise required"}
  readonly v=${3:-""}

  print -P "%F{green}${l}%f:"
  file=$(path ${l} ${e} ${v})
  if [[ -f ${file} ]]; then
    eval ${interpreters[${l}]} ${file}
  else
    print -P "%F{001}${e} not found%f"
  fi
}

function show {
  readonly l=${1:?"Language required"}
  readonly e=${2:?"Exercise required"}
  readonly v=${3:-""}

  print -P "%F{green}${l}%f:"
  cat $(path ${l} ${e} ${v})
  return 0
}

function run_or_show {
  readonly l=${1:?"Language required"}
  readonly e=${2:?"Exercise required"}
  readonly v=${3:-""}

  [[ -n ${show} ]] && show ${l} ${e} ${v} || run ${l} ${e} ${v}
}

function main {
  if [[ -z ${language} ]]; then
    for lang in ${(k)interpreters}; do
      run_or_show ${lang} ${exercise} ${version}
    done
  else
    run_or_show ${language} ${exercise} ${version}
  fi
}

function summary {
  print "Project Euler Solution Summary"
  print "using dir: ${SOLDIR}"
  for lang in ${(k)interpreters}; do
    local dir=$(find ${SOLDIR} -depth 2 -name ${lang} -type d -exec dirname {} \; | \
      tr -d "${SOLDIR}" | sed -e 's/[^0-9]*//' | sort | xargs echo )
          printf "%-18s %s\n" $(print -P  "%F{green}${lang}%f:") "${dir[@]}"
  done
}

function list_languages {
  print "Languages defined"
  print -P  "%F{green}name%f -> %F{yellow}interpreter%f -> %F{red}extension%f\n"
  for lang in ${(k)interpreters}; do
    print -P  "%F{green}${lang}%f -> %F{yellow}${interpreters[$lang]}%f -> %F{red}$extensions[$lang]%f"
  done
}

setlang "wolfram" "wolframscript -file" "wls"
setlang "clojure" "clj -M" "clj"
setlang "python" "python3" "py"
setlang "sql" "sqlite3 :memory: <" "sql"
setlang "ruby" "ruby" "rb"
setlang "zsh"
setlang "raku"
setlang "java"
setlang "lua"

if [[ -n ${sum} ]]; then
  summary
elif [[ -n ${list} ]]; then
  list_languages
else
  main
fi
