#!/usr/bin/env zsh
readonly VERSION="v1.0.0"

[[ -z $1 ]] && $0 --help && exit 1

zparseopts -F -D -E - e:=ex l:=lang -show=show -summary=sum \
  -list=list h=help -help=help -time=timeit -create=createdirs \
  -version=scriptver -problem=problem

readonly SOLDIR=${PROJECT_EULER_DIR:-"src"}

# 'len' must be 3 (for exercise numbers) or the 
# length of the word to accomodate other types
# of exercises such as '-e hello'
typeset len=$(( ${#ex[-1]} >= 3 ? ${#ex[-1]} : 3))

# (l:N::0:) will left pad with '0', allowing
# us to pass '-e 1' and create '001' instead
typeset exercise=${(l:${len}::0:)ex[-1]%.*}

# we reuse the idea of file.ext (file extension)
# to capture a version of an exercise such as 001.1
typeset version=${ex[-1]:e}

typeset language=${lang[-1]}

typeset -A interpreters
typeset -A extensions

function help {
 cat <<- EOH
euler [-e EXERCISE] [-l LANG] [--show] [--summary] [--list] [--time]
      [--create] [--problem] [--version] [-h|--help]

Where EXERCISE is the exercise you want to run, example 001, 002, 003...
and LANG is the language you want it to run. If LANG is absent all
configured languages will run.

-e EXERCISE   The exercise such as 001, 002, 003, ... in fact any
              subdir of the solutions will work.

-l LANG       Narrows to the LANG, where LANG is one of the languages
              configured in 'setlang', example: python, ruby, ...

--show        Instead of executing the exercise it will show its code. If
              EXERCISE is not given then will show for all languages.

--summary     Will show a quick summary of the exercises already found.

--list        Lists the current languages and interpreters configuration.

--time        Will add 'time' to the header of the interpreter for timing
              its execution.

--create      It will create the directories for exercise given by '-e'

--problem     Will show the problem description for '-e'. It actually
              prints out the 'README.md' file on the exercise directory.

--version     Display the version of this script.

-h|--help     Shows this message.

EOH
}

function setlang {
  readonly l=${1:?"Language required"}
  readonly i=${2:-${l}}
  readonly e=${3:-${l}}

  interpreters[${l}]=${i}
  extensions[${l}]=${e}
}

function fpath {
  readonly e=${1:?"Exercise required"}
  readonly l=${2:?"Language required"}
  readonly v=${3:-""}

  local file="${e}${v:+.${v}}.${extensions[${l}]}"

  echo $(dpath ${e} ${l} ${file})
}

function dpath {
  readonly e=${1:?"Exercise required"}
  readonly l=${2:-""}
  readonly f=${3:-""}

  local partial="${SOLDIR}"
  for d in e l f; do
    [[ -n ${(P)${d}} ]] && partial="${partial}/${(P)${d}}"
  done

  echo ${partial}
}

function run {
  readonly e=${1:?"Exercise required"}
  readonly l=${2:?"Language required"}
  readonly v=${3:-""}

  print -P "%F{green}${l}%f:"
  file=$(fpath ${e} ${l} ${v})
  if [[ -f ${file} ]]; then
    eval ${timeit/--/} ${interpreters[${l}]} ${file}
  else
    print -P "%F{001}Exercise: ${e} ${v:+version: ${v}} not found%f"
  fi
}

function show {
  readonly e=${1:?"Exercise required"}
  readonly l=${2:?"Language required"}
  readonly v=${3:-""}

  print -P "%F{green}${l}%f:"
  cat $(fpath ${e} ${l} ${v})
  return 0
}

function run_or_show {
  readonly e=${1:?"Exercise required"}
  readonly l=${2:?"Language required"}
  readonly v=${3:-""}

  [[ -n ${show} ]] && show ${e} ${l} ${v} || run ${e} ${l} ${v}
}

function main {
  if [[ ${exercise} == '000' ]]; then
    print -P "%F{001}Missing -e EXERCISE, use 'euler --help' for more information%f"
    return 1
  fi
  if [[ -z ${language} ]]; then
    for lang in ${(k)interpreters}; do
      run_or_show "${exercise}" "${lang}" "${version}"
    done
  else
    run_or_show "${exercise}" "${language}" "${version}"
  fi
}

function summary {
  print "Project Euler Solution Summary"
  print "using dir: ${SOLDIR}"
  for lang in ${(k)interpreters}; do
    local ext=${extensions[${lang}]}
    local files=($(find ${SOLDIR} -type f -regex ".*\/${lang}\/[0-9]*\.${ext}$" | sort ))

    local r=""
    for file (${files[*]}) r+="${file:t:r} "

    printf "%-18s %s\n" $(print -P  "%F{green}${lang}%f:") "${r}"
  done
}

function list_languages {
  print "Languages defined"
  print -P  "%F{green}name%f -> %F{yellow}interpreter%f -> %F{red}extension%f\n"
  for lang in ${(k)interpreters}; do
    print -P  "${lang} -> %F{yellow}${interpreters[$lang]}%f -> %F{red}$extensions[$lang]%f"
  done
}

function create_dirs {
  readonly ex=${1:?"Exercise required, use -e"}
  print -P "Creating dirs for exercise: %F{green}${ex}%f"
  for lang in ${(k)interpreters}; do
    print -P  "%F{green}${ex}%f/%F{yellow}${lang}%f"
    mkdir -p $(dpath ${ex} ${lang})
  done
}

function show_problem {
  readonly ex=${1:?"Exercise required, use -e"}
  print -P "%F{green}${ex}%f: README.md"
  cat $(dpath ${ex} README.md)
}

setlang "wolfram" "wolframscript -file" "wls"
setlang "clojure" "clj -M" "clj"
setlang "python" "python3" "py"
setlang "sql" "sqlite3 :memory: <" "sql"
setlang "ruby" "ruby" "rb"
setlang "zsh"
setlang "raku"
setlang "java"
setlang "lua"

if [[ -n ${help} ]]; then
  help
elif [[ -n ${sum} ]]; then
  summary
elif [[ -n ${list} ]]; then
  list_languages
elif [[ -n ${createdirs} ]]; then
  create_dirs ${exercise}
elif [[ -n ${problem} ]]; then
  show_problem ${exercise}
elif [[ -n ${scriptver} ]]; then
  print -P "euler(%F{green}${VERSION}%f)"
else
  main
fi
